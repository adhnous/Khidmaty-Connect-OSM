rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function userRole() {
      return isSignedIn() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null;
    }
    function isAdmin() { let r = userRole(); return r == 'admin' || r == 'owner'; }

    // Allow public read access for services
    match /services/{serviceId} {
      function isProviderOwner() { return isSignedIn() && resource.data.providerId == request.auth.uid; }
      allow read: if resource.data.status == 'approved' || isProviderOwner() || isAdmin();
      // Providers can create only their own services; default status should be 'pending'. Admins can create too.
      function isPendingOnCreate() { return !(request.resource.data.status is string) || request.resource.data.status == 'pending'; }
      allow create: if (isSignedIn() && request.resource.data.providerId == request.auth.uid && isPendingOnCreate()) || isAdmin();
      // Providers can update only their own docs and cannot change status or providerId.
      // Admins can update any field (including status).
      allow update: if (
        (isProviderOwner() && request.resource.data.providerId == resource.data.providerId && request.resource.data.status == resource.data.status)
        || isAdmin()
      );
      allow delete: if isProviderOwner() || isAdmin();

      // Reviews subcollection: one review per user (doc id = authorId)
      match /reviews/{authorId} {
        allow read: if true;
        function isAuthor() { return isSignedIn() && request.auth.uid == authorId; }
        function isNotOwner() {
          // If the parent service doc doesn't exist (e.g., demo), treat as not owner
          return !exists(/databases/$(database)/documents/services/$(serviceId))
                 || get(/databases/$(database)/documents/services/$(serviceId)).data.providerId != request.auth.uid;
        }
        function ratingValid() {
          // Firestore client numbers are often doubles; accept any number in [1,5]
          return request.resource.data.rating is number
                 && request.resource.data.rating >= 1
                 && request.resource.data.rating <= 5;
        }
        function serviceIdValid() { return request.resource.data.serviceId == serviceId; }
        function authorIdValid() { return request.resource.data.authorId == request.auth.uid; }
        function textValid() { return request.resource.data.text is string && request.resource.data.text.size() <= 1000; }

        allow create, update: if isAuthor() && isNotOwner() && ratingValid() && serviceIdValid() && authorIdValid() && textValid();
        allow delete: if isAuthor();
      }
    }

    // Users can create their own profile, and can only read/write their own data afterwards.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Aggregated daily stats: providers can read only their rows; no client writes
    match /stats_daily/{docId} {
      allow read: if (request.auth != null && resource.data.providerUid == request.auth.uid) || isAdmin();
      allow write: if false;
    }

    // Raw events are server-only
    match /events/{id} {
      allow read: if false;
      allow write: if false;
    }
  }
}
